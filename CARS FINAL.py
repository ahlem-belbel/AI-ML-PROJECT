# -*- coding: utf-8 -*-
"""scraping.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jCA_wrb3EqCjNmhivJl5u_vK0v7SIlr3

**WEB SCRAPING **
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re

"""**BMW**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/bmw?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type=article.find(attrs={'data-parameter':'gearbox'}).text.strip()

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'BMW'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS1.csv')

"""**FIAT**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/fiat?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type=article.find(attrs={'data-parameter':'gearbox'}).text.strip()

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'FIAT'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS2.csv')

"""**AUDI**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/audi?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'AUDI'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS3.csv')

"""**CITROEN**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/citroen?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'Citroen'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS4.csv')

"""**FORD**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/ford?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'FORD'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS5.csv')

"""**HYUNDAI**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/hyundai?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'hyundai'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS6.csv')

"""**KIA**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/kia?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'KIA'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS7.csv')

"""**MAZDA**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/mazda?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'MAZDA'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS8.csv')

"""**OPEL**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/opel?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'OPEL'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS9.csv')

"""**PEUGEOT**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/peugeot?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'PEUGEOT'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS10.csv')

"""**RENAULT**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/renault?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'RENAULT'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS11.csv')

"""**SEAT**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/seat?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'SEAT'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS12.csv')

"""**SKODA**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/skoda?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'SKODA'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS13.csv')

"""**TOYOTA**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/toyota?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'TOYOTA'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS14.csv')

"""**VOLVO**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/volvo?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'VOLVO'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS15.csv')

"""**DACIA**

"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/dacia?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'DACIA'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS16.csv')

"""**mercedes-benz**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
cars=[]
                                    #BMW
for i in range (1,50):
    url = f'https://www.otomoto.pl/osobowe/mercedes-benz?page={i}'
    response=requests.get(url)
    response=response.content
    soup=BeautifulSoup(response,'html.parser')
    div=soup.find('div',class_="ooa-r53y0q ezh3mkl11")
    if div:
        articles=div.find_all('article',class_='ooa-yca59n e1i3khom0')
        print(i)

        for article in articles:
                                                    #name
              name = article.find('a').text

              # Définir une expression régulière pour extraire la marque et le nom de la voiture
              pattern = re.compile(r'(\w+)(?:\s(.*))?$')

              # Faire correspondre la chaîne avec le modèle regex
              match = pattern.match(name)

              if match:
                  # Si correspondance trouvée, extraire la marque et le nom de la voiture
                  Brand = match.group(1)
                  car_name = match.group(2) if match.group(2) else None
              else:
                  # Si aucune correspondance trouvée, attribuer le nom entier à la marque et le reste à None
                  brand = name
                  car_name = None                           #space
              space=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              space=space[:9]
                                                    # kilometers
              power=article.find('p',class_='e1i3khom10 ooa-1tku07r er34gjf0').text
              power=power[13:18]

                                                    #price
              price=article.find('h3',class_='e1i3khom16 ooa-1n2paoq er34gjf0').text
            #                                          #kilometrage
              kilometrage=article.find('dd',class_='ooa-1omlbtp e1i3khom13').text

              essence=article.find(attrs={'data-parameter':"fuel_type"}).text.strip()
              gearbox_type_element = article.find('dd', attrs={'data-parameter': 'gearbox'})
              gearbox_type = gearbox_type_element.text.strip() if gearbox_type_element else None

              year=article.find(attrs={'data-parameter':'year'}).text.strip()
              brand = 'mercedes-benz'

              cars.append([brand,car_name,space, power, price, kilometrage, essence, gearbox_type, year])
    else:
      print("yes")
df=pd.DataFrame(cars,columns=['brand','Car_Name','Engine capacity','Power','Price','Mileage','Fuel_Type','Gearbox_Type','Year_Of_Production'])
df.to_csv('CARS17.csv')

"""**COMBINE THE DATA !**"""

import pandas as pd
import os
# Read all csv files in the current directory
df_list = []
for filename in os.listdir():
    if filename.endswith('.csv'):
        df_list.append(pd.read_csv(filename))

# Concatenate all dataframes into a single dataframe
df = pd.concat(df_list)

# Save the combined dataframe to a new csv file
df.to_csv('data.csv', index=False)